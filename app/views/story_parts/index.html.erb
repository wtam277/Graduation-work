<!-- フォーム -->
<%= form_with(url: comic_story_parts_path(@comic), local: true) do %>
  <h2>内容の入力（起承転結）</h2>

  <% (0..3).each do |i| %>
    <% story_part = @story_parts&.find { |sp| sp.part_type == i } %>

    <div class="story-part-container">
      <div class="story-part-label">
        <%= label_tag "story_part[#{i}][content]", ["起", "承", "転", "結"][i] %>
      </div>

      <div class="story-part-input">
        <%= text_area_tag "story_part[#{i}][content]", story_part&.content, rows: 4, cols: 50 %>
        <%= hidden_field_tag "story_part[#{i}][part_type]", i %>
      </div>

      <div class="note-button">
        <button type="button" class="add-note" onclick="addDraggableNote()">＋</button>
      </div>
    </div>
  <% end %>

  <div>
    <%= submit_tag "保存" %>
  </div>
<% end %>

<!-- 付箋のコンテナ -->
<div id="note-container">
  <% @stiky_notes.each do |note| %>
    <div class="note" style="left: <%= note.position_x %>px; top: <%= note.position_y %>px;" data-id="<%= note.id %>">
      <textarea oninput="updateNoteContent(this, <%= note.id %>)"><%= note.note_content %></textarea>
    </div>
  <% end %>
</div>

<style>
  .story-part-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 10px;
  }

  .story-part-label {
    width: 50px;
    font-weight: bold;
  }

  .story-part-input {
    flex-grow: 1;
  }

  .note-button {
    width: 50px;
    text-align: center;
  }

  .add-note {
    background-color: #ffcc00;
    border: none;
    font-size: 20px;
    padding: 5px 10px;
    cursor: pointer;
    border-radius: 5px;
  }

  .note {
    width: 150px;
    height: 100px;
    background-color: yellow;
    position: absolute;
    cursor: grab;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    border: 1px solid #ccc;
    padding: 5px;
    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
  }

  .note textarea {
    width: 100%;
    height: 100%;
    border: none;
    background: transparent;
    font-size: 14px;
    resize: none;
    outline: none;
    text-align: left;
  }
</style>

<script>
  document.addEventListener("turbo:load", applyDraggableToExistingNotes);
  document.addEventListener("DOMContentLoaded", applyDraggableToExistingNotes);

  function applyDraggableToExistingNotes() {
    document.querySelectorAll(".note").forEach(makeNoteDraggable);
  }

  function addDraggableNote() {
    fetch("<%= comic_stiky_notes_path(@comic) %>", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-Token": "<%= form_authenticity_token %>"
      },
      body: JSON.stringify({
        stiky_note: {
          note_content: "新しいメモ",
          position_x: Math.random() * (window.innerWidth - 150),
          position_y: Math.random() * (window.innerHeight - 150)
        }
      })
    })
    .then(response => response.json())
    .then(data => {
      const noteContainer = document.getElementById("note-container");
      const note = document.createElement("div");
      note.className = "note";
      note.style.left = data.position_x + "px";
      note.style.top = data.position_y + "px";
      note.setAttribute("data-id", data.id);

      const textArea = document.createElement("textarea");
      textArea.value = data.note_content;
      textArea.addEventListener("input", () => updateNoteContent(textArea, data.id));

      note.appendChild(textArea);
      noteContainer.appendChild(note);

      makeNoteDraggable(note);
    });
  }

  function updateNoteContent(textarea, id) {
    fetch(`/comics/<%= @comic.id %>/stiky_notes/${id}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-Token": "<%= form_authenticity_token %>"
      },
      body: JSON.stringify({ stiky_note: { note_content: textarea.value } })
    });
  }

  function makeNoteDraggable(note) {
    let isDragging = false;

    note.addEventListener("mousedown", function(event) {
      if (event.target.tagName === "TEXTAREA") return;

      isDragging = true;
      let shiftX = event.clientX - note.getBoundingClientRect().left;
      let shiftY = event.clientY - note.getBoundingClientRect().top;

      function moveAt(mouseX, mouseY) {
        note.style.left = mouseX - shiftX + "px";
        note.style.top = mouseY - shiftY + "px";
      }

      function onMouseMove(event) {
        if (!isDragging) return;
        moveAt(event.pageX, event.pageY);
      }

      function onMouseUp() {
        if (!isDragging) return;
        isDragging = false;

        document.removeEventListener("mousemove", onMouseMove);
        document.removeEventListener("mouseup", onMouseUp);

        fetch(`/comics/<%= @comic.id %>/stiky_notes/${note.dataset.id}`, {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": "<%= form_authenticity_token %>"
          },
          body: JSON.stringify({
            stiky_note: {
              position_x: parseFloat(note.style.left),
              position_y: parseFloat(note.style.top)
            }
          })
        });
      }

      document.addEventListener("mousemove", onMouseMove);
      document.addEventListener("mouseup", onMouseUp);
    });
  }
</script>