<h1>このページは、簡易4コマです</h1>

<% comic = Comic.find(params[:comic_id]) %>

<p>＜起＞: <%= comic.story_parts.where(part_type: 0).order(created_at: :desc).first&.content || "なし" %></p>

<h1>簡易4コマパネル作成</h1>

<%= form_with(model: [@comic, @panel], url: @panel.persisted? ? comic_panel_path(@comic, @panel) : comic_panels_path(@comic), method: @panel.persisted? ? :patch : :post, local: true, multipart: true) do |f| %>
  <div>
    <%= f.label :location, "ロケーション" %>
    <%= f.text_field :location %>
  </div>

  <%= f.hidden_field :position, value: 0 %>


<!-- キャラクター一覧表示 -->
<div id="character-fields">
  <div class="character-field">
    <%= f.label :character_ids, "キャラクターを選択" %>
    <select class="character-select" name="panel[character_ids][]" onchange="updateCharacter(this)">
  <option value="">キャラクターを選択</option>
  <% @characters.each do |character| %>
    <option value="<%= character.id %>" data-icon="<%= url_for(character.icon) if character.icon.attached? %>"
      <%= "selected" if @panel.characters.include?(character) %>>
      <%= character.name %>
    </option>
  <% end %>
</select>

    <!-- キャラクターアイコン -->
    <div class="character-info">
      <img src="" alt="キャラクター画像" class="character-preview" style="display: none; width: 100px; height: 100px;">
      
      <!-- 吹き出し (SMS風の入力) -->
      <div class="speech-bubble" style="display: none;">
        <%= f.text_field :speech_contents, name: "panel[speech_contents][]", placeholder: "セリフを入力..." %>
      </div>
    </div>
  </div>
</div>

<!-- キャラクター追加ボタン -->
<button type="button" id="add-character" class="add-button">+ キャラクター追加</button>

<!-- パネル作成ボタン -->
<%= f.submit "パネルを作成" %>

<% end %>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const addButton = document.getElementById("add-character");
    const characterFields = document.getElementById("character-fields");

    // キャラクター追加ボタンの処理
    addButton.addEventListener("click", function() {
      const newField = document.querySelector(".character-field").cloneNode(true);

      // 新しく追加した要素の初期化
      newField.querySelector(".character-preview").src = "";
      newField.querySelector(".character-preview").style.display = "none";
      newField.querySelector(".speech-bubble").style.display = "none";
      newField.querySelector("select").value = "";
      newField.querySelector("input[type='text']").value = "";

      characterFields.appendChild(newField);
    });

    // キャラクター選択時にアイコン＆吹き出しを表示
    window.updateCharacter = function(select) {
      const selectedOption = select.options[select.selectedIndex];
      const iconUrl = selectedOption.getAttribute("data-icon");
      const imageTag = select.parentElement.querySelector(".character-preview");
      const speechBubble = select.parentElement.querySelector(".speech-bubble");

      if (iconUrl) {
        imageTag.src = iconUrl;
        imageTag.style.display = "block";
        speechBubble.style.display = "block"; // 吹き出しを表示
      } else {
        imageTag.src = "";
        imageTag.style.display = "none";
        speechBubble.style.display = "none"; // 吹き出しを非表示
      }
    };
  });
</script>



<p>＜承＞: <%= comic.story_parts.where(part_type: 1).order(created_at: :desc).first&.content || "なし" %></p>
<p>＜転＞: <%= comic.story_parts.where(part_type: 2).order(created_at: :desc).first&.content || "なし" %></p>
<p>＜結＞: <%= comic.story_parts.where(part_type: 3).order(created_at: :desc).first&.content || "なし" %></p>

